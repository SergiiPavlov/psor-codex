// app/api/order/route.ts
import { NextResponse } from 'next/server'

// –µ—Å–ª–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ –≤–∫–ª—é—á—ë–Ω Edge-runtime, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É –Ω–∏–∂–µ
export const runtime = 'nodejs'

type OrderPayload = {
  name?: string
  phone?: string
  city?: string
  warehouse?: string
  product?: string
  volume?: string
  quantity?: string | number
  comment?: string
  // –ª—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —à–ª—ë—Ç —Ñ–æ—Ä–º–∞
  [key: string]: unknown
}

function asText(v: unknown) {
  if (v === null || v === undefined) return ''
  if (typeof v === 'string') return v
  try {
    return JSON.stringify(v)
  } catch {
    return String(v)
  }
}

export async function POST(req: Request) {
  try {
    const payload = (await req.json()) as OrderPayload

    // ENV
    const EMAIL_WEBHOOK = process.env.ORDER_EMAIL_WEBHOOK
    const TG_WEBHOOK = process.env.ORDER_TELEGRAM_WEBHOOK

    const TG_ENABLED =
      (process.env.ORDER_TELEGRAM_ENABLED ?? process.env.ORDER_TELEGRAM_ENABLED)?.toString().toLowerCase() === 'true'

    const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
    const CHAT_ID = process.env.TELEGRAM_CHAT_ID

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã (–º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç)
    const requests: Promise<Response>[] = []

    // 1) –µ—Å–ª–∏ –∑–∞–¥–∞–Ω email-–≤–µ–±—Ö—É–∫ ‚Äî —à–ª—ë–º —Ç—É–¥–∞ —Å—ã—Ä–æ–π payload
    if (EMAIL_WEBHOOK) {
      requests.push(
        fetch(EMAIL_WEBHOOK, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload),
        })
      )
    }

    // 2) –µ—Å–ª–∏ –∑–∞–¥–∞–Ω —Ç–µ–ª–µ–≥—Ä–∞–º-–≤–µ–±—Ö—É–∫ ‚Äî —Ç–æ–∂–µ —à–ª—ë–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞ —Å–ª—É—á–∞–π —Å–≤–æ–µ–≥–æ –≤–Ω–µ—à–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞)
    if (TG_WEBHOOK) {
      requests.push(
        fetch(TG_WEBHOOK, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload),
        })
      )
    }

    // 3) –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram (–≤–∞—Ä–∏–∞–Ω—Ç B)
    if (TG_ENABLED && BOT_TOKEN && CHAT_ID) {
      const text =
        `üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑\n` +
        `‚Äî –ò–º—è: ${asText(payload.name) || '-'}\n` +
        `‚Äî –¢–µ–ª–µ—Ñ–æ–Ω: ${asText(payload.phone) || '-'}\n` +
        `‚Äî –ì–æ—Ä–æ–¥: ${asText(payload.city) || '-'}\n` +
        `‚Äî –û—Ç–¥–µ–ª–µ–Ω–∏–µ: ${asText(payload.warehouse) || '-'}\n` +
        `‚Äî –ü—Ä–æ–¥—É–∫—Ç: ${asText(payload.product) || '-'}\n` +
        `‚Äî –û–±—ä—ë–º: ${asText(payload.volume) || '-'}\n` +
        `‚Äî –ö–æ–ª-–≤–æ: ${asText(payload.quantity) || '-'}\n` +
        (payload.comment ? `‚Äî –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${asText(payload.comment)}\n` : ``)

      const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`

      requests.push(
        fetch(url, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          // –í–ù–ò–ú–ê–ù–ò–ï: CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ß–ò–°–õ–û–í–´–ú id (–∞ –Ω–µ @username) –∏ —É –±–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–∏–∞–ª–æ–≥ —Å –≤–∞–º–∏
          body: JSON.stringify({ chat_id: CHAT_ID, text }),
        })
      )
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ ‚Äî –æ—Ç–≤–µ—á–∞–µ–º –æ—à–∏–±–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if (requests.length === 0) {
      return NextResponse.json(
        { ok: false, error: 'No order endpoints configured (ORDER_* envs are empty).' },
        { status: 500 }
      )
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –í–°–ï, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º, –µ—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É
    const results = await Promise.allSettled(requests)

    const allFailed = results.every(
      (r) => r.status === 'rejected' || (r.status === 'fulfilled' && !r.value.ok)
    )

    if (allFailed) {
      // –°–æ–±–µ—Ä—ë–º –∫—Ä–∞—Ç–∫—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
      const diag = results.map((r) =>
        r.status === 'rejected' ? `rejected: ${String(r.reason)}` : `status ${r.value.status}`
      )
      return NextResponse.json({ ok: false, error: 'All targets failed', details: diag }, { status: 500 })
    }

    return NextResponse.json({ ok: true })
  } catch (e) {
    return NextResponse.json({ ok: false, error: String(e) }, { status: 500 })
  }
}
